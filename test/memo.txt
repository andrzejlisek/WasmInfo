(module


  (import "env" "memory_ext_1_x" (memory $memory_ext_1 1 2))
  (import "env" "memory_ext_2_x" (memory $memory_ext_2 1 2))

  (import "env" "table_ext_1_x" (table $table_ext_1 10 funcref))
  (import "env" "table_ext_2_x" (table $table_ext_2 10 funcref))
  (import "env" "table_ext_3_x" (table $table_ext_3 10 externref))
  (import "env" "table_ext_4_x" (table $table_ext_4 10 externref))

  (memory $memory_int_1 1 2) ;; start with one memory page, and max of 2 pages
  (export "memory_int_1_x" (memory $memory_int_1))

  (memory $memory_int_2 1 2) ;; start with one memory page, and max of 2 pages
  (export "memory_int_2_x" (memory $memory_int_2))

  (table $table_int_1 10 funcref)
  (table $table_int_2 10 funcref)
  (export "table_int_1_x" (table $table_int_1))
  (export "table_int_2_x" (table $table_int_2))

  (table $table_int_3 10 externref)
  (table $table_int_4 10 externref)
  (export "table_int_3_x" (table $table_int_3))
  (export "table_int_4_x" (table $table_int_4))

  (elem $elem0 func $elem_func)
  (elem $elem1 func $elem_func)
  (func $elem_func)


  (func (export "load_from_memo") (param $num i32)
    i32.const 100
    (i32.load $memory_ext_1)
    drop

    i32.const 101
    (i32.load $memory_ext_2)
    drop

    i32.const 102
    (i32.load $memory_int_1)
    drop

    i32.const 103
    (i32.load $memory_int_2)
    drop
  )

  (func (export "store_to_memo") (param $num i32)
    i32.const 100
    local.get $num
    (i32.store $memory_ext_1)

    i32.const 101
    local.get $num
    (i32.store $memory_ext_2)

    i32.const 102
    local.get $num
    (i32.store $memory_int_1)

    i32.const 103
    local.get $num
    (i32.store $memory_int_2)
  )


  (func (export "mem_v128_1")
    i32.const 100
    i32.const 200
    (v128.load $memory_ext_1)
    (v128.store $memory_ext_1)

    i32.const 101
    i32.const 201
    (v128.load $memory_ext_2)
    (v128.store $memory_ext_2)
 
    i32.const 102
    i32.const 202
    (v128.load $memory_int_1)
    (v128.store $memory_int_1)

    i32.const 103
    i32.const 203
    (v128.load $memory_int_2)
    (v128.store $memory_int_2)
  )


  (func (export "mem_v128_2")
    i32.const 100
    i32.const 200
    i32.const 300
    (v128.load $memory_ext_1)
    (v128.load8_lane $memory_ext_1 7)
    (v128.store8_lane $memory_ext_1 7)

    i32.const 101
    i32.const 201
    i32.const 301
    (v128.load $memory_ext_2)
    (v128.load8_lane $memory_ext_2 7)
    (v128.store8_lane $memory_ext_2 7)
 
    i32.const 102
    i32.const 202
    i32.const 302
    (v128.load $memory_int_1)
    (v128.load8_lane $memory_int_1 7)
    (v128.store8_lane $memory_int_1 7)

    i32.const 103
    i32.const 203
    i32.const 303
    (v128.load $memory_int_2)
    (v128.load8_lane $memory_int_2 7)
    (v128.store8_lane $memory_int_2 7)
  )




  (func (export "align_offset") (param $num i32)
    i32.const 100
    (i32.load)
    local.get $num
    (i32.store)

    i32.const 100
    (i32.load align=2)
    local.get $num
    (i32.store align=2)

    i32.const 100
    (i32.load align=4)
    local.get $num
    (i32.store align=4)

    i32.const 100
    (i32.load offset=12)
    local.get $num
    (i32.store offset=12)

    i32.const 100
    (i32.load offset=34)
    local.get $num
    (i32.store offset=34)
  )

  (func (export "table_get_set_func")
    i32.const 0
    ref.null func
    (table.set $table_ext_1)
    i32.const 0
    ref.null func
    (table.set $table_ext_2)
    i32.const 0
    ref.null func
    (table.set $table_int_1)
    i32.const 0
    ref.null func
    (table.set $table_int_2)

    i32.const 1
    (table.get $table_ext_1)
    drop
    i32.const 1
    (table.get $table_ext_2)
    drop
    i32.const 1
    (table.get $table_int_1)
    drop
    i32.const 1
    (table.get $table_int_2)
    drop
  )

  (func (export "table_get_set_extern")
    i32.const 0
    ref.null extern
    (table.set $table_ext_3)
    i32.const 0
    ref.null extern
    (table.set $table_ext_4)
    i32.const 0
    ref.null extern
    (table.set $table_int_3)
    i32.const 0
    ref.null extern
    (table.set $table_int_4)

    i32.const 1
    (table.get $table_ext_3)
    drop
    i32.const 1
    (table.get $table_ext_4)
    drop
    i32.const 1
    (table.get $table_int_3)
    drop
    i32.const 1
    (table.get $table_int_4)
    drop
  )


  (func $three_vals (export "three_vals") (result i32 i32 i32)
    (i32.const 0)
    (i32.const 0)
    (i32.const 0)
  )

  (func $three_func (export "three_func") (result i32 funcref i32)
    (i32.const 0)
    (ref.null func)
    (i32.const 0)
  )

  (func $three_extern (export "three_extern") (result i32 externref i32)
    (i32.const 0)
    (ref.null extern)
    (i32.const 0)
  )

  (func $memo_grow (export "memo_grow")
    (memory.grow $memory_ext_1 (i32.const 1))
    drop

    (memory.grow $memory_ext_2 (i32.const 1))
    drop

    (memory.grow $memory_int_1 (i32.const 1))
    drop

    (memory.grow $memory_int_2 (i32.const 1))
    drop
  )

  (func $table_grow_func (export "table_grow_func")
    (table.grow $table_ext_1 (ref.null func) (i32.const 1))
    drop

    (table.grow $table_ext_2 (ref.null func) (i32.const 1))
    drop

    (table.grow $table_int_1 (ref.null func) (i32.const 1))
    drop

    (table.grow $table_int_2 (ref.null func) (i32.const 1))
    drop
  )

  (func $table_grow_extern (export "table_grow_extern")
    (table.grow $table_ext_3 (ref.null extern) (i32.const 1))
    drop

    (table.grow $table_ext_4 (ref.null extern) (i32.const 1))
    drop

    (table.grow $table_int_3 (ref.null extern) (i32.const 1))
    drop

    (table.grow $table_int_4 (ref.null extern) (i32.const 1))
    drop
  )

  (func $memo_size (export "memo_size")
    (memory.size $memory_ext_1)
    drop

    (memory.size $memory_ext_2)
    drop

    (memory.size $memory_int_1)
    drop

    (memory.size $memory_int_2)
    drop
  )  

  (func $table_size (export "table_size")
    (table.size $table_ext_1)
    drop

    (table.size $table_ext_2)
    drop

    (table.size $table_ext_3)
    drop

    (table.size $table_ext_4)
    drop

    (table.size $table_int_1)
    drop

    (table.size $table_int_2)
    drop

    (table.size $table_int_3)
    drop

    (table.size $table_int_4)
    drop
  )  

  (func (export "memo_copy")
    (call $three_vals) (memory.copy)
    (call $three_vals) (memory.copy $memory_ext_1)
    (call $three_vals) (memory.copy $memory_ext_2)
    (call $three_vals) (memory.copy $memory_int_1)
    (call $three_vals) (memory.copy $memory_int_2)
    (call $three_vals) (memory.copy $memory_ext_1 $memory_ext_2)
    (call $three_vals) (memory.copy $memory_ext_2 $memory_ext_1)
    (call $three_vals) (memory.copy $memory_int_1 $memory_int_2)
    (call $three_vals) (memory.copy $memory_int_2 $memory_int_1)
  )  

  (func (export "table_copy")
    (call $three_vals) (table.copy)
    (call $three_vals) (table.copy $table_ext_1)
    (call $three_vals) (table.copy $table_ext_2)
    (call $three_vals) (table.copy $table_int_1)
    (call $three_vals) (table.copy $table_int_2)
    (call $three_vals) (table.copy $table_ext_1 $table_ext_2)
    (call $three_vals) (table.copy $table_ext_2 $table_ext_1)
    (call $three_vals) (table.copy $table_ext_3 $table_ext_4)
    (call $three_vals) (table.copy $table_ext_4 $table_ext_3)
    (call $three_vals) (table.copy $table_int_1 $table_int_2)
    (call $three_vals) (table.copy $table_int_2 $table_int_1)
    (call $three_vals) (table.copy $table_int_3 $table_int_4)
    (call $three_vals) (table.copy $table_int_4 $table_int_3)
  )  

  (func (export "memo_fill")
    (call $three_vals) (memory.fill $memory_ext_1)
    (call $three_vals) (memory.fill $memory_ext_2)
    (call $three_vals) (memory.fill $memory_int_1)
    (call $three_vals) (memory.fill $memory_int_2)
  )  

  (func (export "table_fill")
    (call $three_func) (table.fill $table_ext_1)
    (call $three_func) (table.fill $table_ext_2)
    (call $three_extern) (table.fill $table_ext_3)
    (call $three_extern) (table.fill $table_ext_4)
    (call $three_func) (table.fill $table_int_1)
    (call $three_func) (table.fill $table_int_2)
    (call $three_extern) (table.fill $table_int_3)
    (call $three_extern) (table.fill $table_int_4)
  )  

  (func (export "memo_init")
    (call $three_vals) (memory.init $memory_ext_1 $data0)
    (call $three_vals) (memory.init $memory_ext_1 $data1)
    (call $three_vals) (memory.init $memory_ext_2 $data0)
    (call $three_vals) (memory.init $memory_ext_2 $data1)
    (call $three_vals) (memory.init $memory_int_1 $data0)
    (call $three_vals) (memory.init $memory_int_1 $data1)
    (call $three_vals) (memory.init $memory_int_2 $data0)
    (call $three_vals) (memory.init $memory_int_2 $data1)
  )  
  
  (func (export "table_init")
    (call $three_vals) (table.init $table_ext_1 $elem0)
    (call $three_vals) (table.init $table_ext_1 $elem1)
    (call $three_vals) (table.init $table_ext_2 $elem0)
    (call $three_vals) (table.init $table_ext_2 $elem1)
    (call $three_vals) (table.init $table_int_1 $elem0)
    (call $three_vals) (table.init $table_int_1 $elem1)
    (call $three_vals) (table.init $table_int_2 $elem0)
    (call $three_vals) (table.init $table_int_2 $elem1)
  )  
  
  (func (export "memo_wait_notify")
   (memory.atomic.wait32 0 offset=12 (i32.const 0) (i32.const 0) (i64.const 0))
   drop
   (memory.atomic.wait32 1 offset=12 (i32.const 0) (i32.const 0) (i64.const 0))
   drop
   (memory.atomic.wait32 2 offset=12 (i32.const 0) (i32.const 0) (i64.const 0))
   drop
   (memory.atomic.wait32 3 offset=12 (i32.const 0) (i32.const 0) (i64.const 0))
   drop

   (memory.atomic.wait64 0 offset=12 (i32.const 0) (i64.const 0) (i64.const 0))
   drop
   (memory.atomic.wait64 1 offset=12 (i32.const 0) (i64.const 0) (i64.const 0))
   drop
   (memory.atomic.wait64 2 offset=12 (i32.const 0) (i64.const 0) (i64.const 0))
   drop
   (memory.atomic.wait64 3 offset=12 (i32.const 0) (i64.const 0) (i64.const 0))
   drop

   (memory.atomic.notify 0 offset=12 (i32.const 0) (i32.const 0))
   drop
   (memory.atomic.notify 1 offset=12 (i32.const 0) (i32.const 0))
   drop
   (memory.atomic.notify 2 offset=12 (i32.const 0) (i32.const 0))
   drop
   (memory.atomic.notify 3 offset=12 (i32.const 0) (i32.const 0))
   drop
  )

  (func (export "object_drop")
    data.drop $data0
    data.drop $data1
    elem.drop $elem0
    elem.drop $elem1
  )
  
  (data $data0 "Hello")
  (data $data1 "World")
)

